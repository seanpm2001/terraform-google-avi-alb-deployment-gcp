name: Avi - 2 Site GSLB Deployment

# Controls when the workflow will run
on:
  # Triggers the workflow on push or pull request events but only for the main branch
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  release:
    types: [released]


  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# These scenarios will be ran in parallel
jobs:
  # This workflow contains multiple jobs to test various scenarios
  dual-site:
    name: gslb (${{ matrix.avi_version }},HA_${{ matrix.controller_ha }})
    runs-on: ubuntu-latest
    env:
      site_type: "gslb"
      GOOGLE_APPLICATION_CREDENTIALS: /home/runner/gcp-creds.json
      TF_VAR_project: ${{ secrets.TF_VAR_PROJECT }}
      TF_VAR_avi_version: ${{ matrix.avi_version }}
      TF_VAR_controller_ha: ${{ matrix.controller_ha }}
      TF_VAR_service_account_email: ${{ secrets.TF_VAR_SERVICE_ACCOUNT_EMAIL }}
      TF_VAR_controller_default_password: ${{ secrets.TF_VAR_CONTROLLER_DEFAULT_PASSWORD }}
      TF_VAR_controller_password: ${{ secrets.TF_VAR_CONTROLLER_PASSWORD }}
      TF_VAR_controller_image_gs_path: ${{ secrets.BUCKET }}/gcp_controller-${{ matrix.avi_version }}.tar.gz
      TF_VAR_controller_public_address: true
      TF_VAR_custom_vpc_name: ${{ secrets.TF_VAR_CUSTOM_VPC_NAME }}
      TF_VAR_custom_subnetwork_west: ${{ secrets.TF_VAR_CUSTOM_SUBNETWORK_WEST }}
      TF_VAR_custom_subnetwork_east: ${{ secrets.TF_VAR_CUSTOM_SUBNETWORK_EAST }}
    defaults:
      run:
        shell: bash
        working-directory: test
    strategy:
      matrix:
        include:
          - avi_version: 20.1.7
            controller_ha: false
          - avi_version: 21.1.3
            controller_ha: false
          - avi_version: 20.1.7
            controller_ha: true
          - avi_version: 21.1.3
            controller_ha: true
      fail-fast: false
        

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v2

      - name: Setup Go environment
        uses: actions/setup-go@v2.1.3
        with:
          go-version: 1.16

      - name: Setup Env
        run: |
          go mod download
          pipx inject ansible-core avisdk requests --include-deps --include-apps
          pipx list
          ansible-galaxy collection install vmware.alb
          echo $GCP_CREDS > /home/runner/gcp-creds.json
        env:
          GCP_CREDS: ${{ secrets.GCP_CREDS }}
      
      - name: Create Infrastructure and run Go Tests
        run: go test -v create_infra_test.go -tags=e2e -timeout 120m
          
        
      - name: Run Ansible Playbook to verify Avi Controller Status
        run: |
          export name_prefix_east=$(cat ../examples/gslb/.test-data/TF_VAR_name_prefix_east.json)
          export name_prefix_west=$(cat ../examples/gslb/.test-data/TF_VAR_name_prefix_west.json)
          export controller_west_ip=$(terraform -chdir="../examples/gslb" output -no-color  -json | jq .controllers_west.value[0].public_ip_address)
          export controller_east_ip=$(terraform -chdir="../examples/gslb" output -no-color  -json | jq .controllers_east.value[0].public_ip_address)
          ansible-playbook ansible_test.yml -e password=$TF_VAR_controller_password -e controller_ip=$controller_east_ip -e avi_version=$TF_VAR_avi_version -e name_prefix=$name_prefix_east -e controller_ha=$TF_VAR_controller_ha
          ansible-playbook ansible_test.yml -e password=$TF_VAR_controller_password -e controller_ip=$controller_west_ip -e verify_gslb=true -e avi_version=$TF_VAR_avi_version -e name_prefix=$name_prefix_west -e controller_ha=$TF_VAR_controller_ha

      - name: Cleanup Avi Created Infra
        if: ${{ always() }}
        run: |
          export controller_west_ip=$(terraform -chdir="../examples/gslb" output -no-color  -json | jq .controllers_west.value[0].public_ip_address)
          export controller_east_ip=$(terraform -chdir="../examples/gslb" output -no-color  -json | jq .controllers_east.value[0].public_ip_address)
          ansible-playbook ansible_avi_cleanup.yml -e password=$TF_VAR_controller_password -e controller_ip=$controller_east_ip -e avi_version=$TF_VAR_avi_version
          ansible-playbook ansible_avi_cleanup.yml -e password=$TF_VAR_controller_password -e controller_ip=$controller_west_ip -e avi_version=$TF_VAR_avi_version

        
      - name: Run Terraform Destroy
        if: ${{ always() }}
        run: |
          go test -v destroy_infra_test.go -timeout 30m
          rm /home/runner/gcp-creds.json